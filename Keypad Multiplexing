
#include <avr/io.h>
#define F_CPU 16000000UL  // Assuming 16MHz clock frequency
#include <util/delay.h>

#define BAUDRATE 9600
#define UBRR ((F_CPU / (16UL * BAUDRATE)) - 1)

void  USART_Init(void) 
	{
	// Sets the high byte of the baud rate register to 0 
	UBRR0H = 0; 
	
	//sets the low register 0 to the previously defined BAUDRATE
	UBRR0L = UBRR;
	
	//sets the 0B register to TX = 1 (enables transmit)
	UCSR0B |= (1<<TXEN0);
	
	//sets the 0C register to UCZ00 = 1 and UCSZ01 = 1
	UCSR0C |= (1<<UCSZ00) | (1<< UCSZ01);
	}

void Tran_USART(uint8_t data)
	{
	while (!(UCSR0A & (1 << UDRE0)));  //empty transmit buffer
	UDR0 = data;  // data transmission
	}

void in_keypad() 
{
	// Set Rows output
	DDRD |= (1 << PD4) | (1 << PD5) | (1 << PD6) | (1 << PD7);
	
	// Set Columns input with pull-up resistors enabled
	DDRB &= ~((1 << PB0) & ~(1 << PB1) & ~(1 << PB2) & ~(1 << PB3));
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3);  // Enable pull-up resistors
}

char keypad()
	{
	//Keypad layout 
	char keys[4][4] = 
	{
		{'1', '2', '3', 'A'}, 
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	for (int row = 4; row < 8; row++) 
	{
		PORTD &= ~(1 << row); //activate rows
		for (int col = 0; col < 4; col++)
		{
			if (!(PINB & (1 << col))) //key pressed reading
			 {
				Tran_USART(keys[row - 4][col]); // key transmission
				_delay_ms(400); // helps not read multiple presses of keys
			 }
		}
		PORTD |= (1 << row);
	}

	return '\0';  // Return null character if no key pressed
}

int main() {
	USART_Init();
	in_keypad();

	while (1) 
	{
		char key = keypad();
		if (key != '\0') 
		{
			Tran_USART(key);
			_delay_ms(100);  // Delay to prevent transmitting multiple characters for a single key press
		}
	}

	return 0;
}
