#include <avr/io.h>
#include <avr/interrupt.h>

#define F_CPU 16000000UL // Example CPU frequency
#define BAUD 9600
#define BAUDRATE ((F_CPU)/(16UL*BAUD)-1)
#define LEDON PORTB |= (1<<PORTB5)
#define LEDOFF PORTB &= ~(1<<PORTB5)

void setup();

volatile short int dutycycle = 0;

int main(void)
{
	DDRB |= (1 << PORTB5); // Set PORTB5 as output for LED
	setup();
	sei(); // Enable global interrupts

	while (1)
	{
		// Adjust OCR2B based on dutycycle for PWM control
		OCR2B = OCR2A / 10 * dutycycle;
	}
}

void setup()
{
	// Keypad setup
	DDRB &= 0xF0; // Lower 4 bits of PORTB as input for keypad columns
	DDRD |= 0xF0; // Upper 4 bits of PORTD as output for keypad rows
	PORTD |= 0xF0; // Enable pull-ups for upper 4 bits of PORTD
	PORTB |= 0x0F; // Enable pull-ups for lower 4 bits of PORTB

	// Timer0 setup
	TCCR0A |= (1 << WGM01); // Set Timer0 in CTC mode
	TCCR0B |= (1 << CS02); // Set prescaler to 256
	TIMSK0 |= (1 << OCIE0A); // Enable Timer0 compare match interrupt
	OCR0A = 187; // Set OCR0A for approximately 1 millisecond interrupt

	// Timer2 setup
	TCCR2A |= (1 << WGM21); // Set Timer2 in CTC mode
	TCCR2B |= (1 << CS20) | (1 << CS22); // Set prescaler to 128
	TIMSK2 |= (1 << OCIE2A) | (1 << OCIE2B); // Enable Timer2 compare match A and B interrupts
	OCR2A = 77; // Set OCR2A for approximately 5 milliseconds interrupt
}

ISR(TIMER0_COMPA_vect)
{
	static uint8_t row = 0;

	short int button[4][4] = 
	{
		{1, 2, 3, 0},   // Updated to set 0 for non-number buttons
		{4, 5, 6, 0},   // Updated to set 0 for non-number buttons
		{7, 8, 9, 0},   // Updated to set 0 for non-number buttons
		{0, 0, 0, 0}
	};

	char key[4][4] =
	{
		{'1', '2', '3', 'A'},
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	PORTD &= ~(1 << (row + 4)); // Activate current row

	for (int i = 4; i < 8; i++)
	{
		PORTD &= ~(1 << i); // Activate each row one by one
		for (int j = 0; j < 4; j++)
		{
			if (!(PINB & (1 << j))) // Check if button is pressed
			{
				while (!(PINB & (1 << j))); // Wait until button is released
				if (button[i - 4][j] == 0) // Check if non-number button is pressed
				{
					dutycycle = 0; // Set dutycycle to 0
					PORTB &= ~(1 << PORTB5); // Turn off LED
					OCR2B = 0; // Turn off PWM signal
				}
				else
				{
					dutycycle = button[i - 4][j]; // Set dutycycle based on button press
				}
			}
		}
		PORTD |= 0xF0; // Deactivate all rows
	}
}

ISR(TIMER2_COMPA_vect)
{
	if (dutycycle != 0) // Check if dutycycle is not zero
	{
		LEDON; // Turn on LED
	}
	// No action needed if dutycycle is 0 (LED remains off)
}

ISR(TIMER2_COMPB_vect)
{
	LEDOFF; // Turn off LED
}




